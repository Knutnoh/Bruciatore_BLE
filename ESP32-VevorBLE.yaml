esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}

substitutions:
  name: bt-vevor_ble
  friendly_name: Diesel_Air_Heater

esp32_ble_tracker:

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "vHF/emJMoAZz3q8k4JySuSZnYEa43IujpwN9+fQkwYk="

ota:
  platform: esphome

# Web Server
web_server:
  port: 80
  version: 1

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "VevorBLE Hotspot"
    password: "12345678"

interval:
  - interval: 15s
    id: intervallo
    then:
      - ble_client.ble_write:
          # ACHTUNG: Hier die neue Service-UUID
          service_uuid: 0000fff0-0000-1000-8000-00805f9b34fb 
          # ACHTUNG: Hier die neue Write-Characteristic-UUID ODER Handle 0x0005
          characteristic_uuid: 0000fff1-0000-1000-8000-00805f9b34fb
          # Alternative: handle: 0x0005
          handle: 0x0005
          value: [0xaa, 0x55, 0x0c, 0x22, 0x01, 0x00, 0x00, 0x2f]

ble_client:
  - mac_address: EC:B1:C3:00:3C:56 # change to your mac address
    id: heater_ble

# Global variables
globals:
  - id: current_mode
    type: int
    initial_value: '1' # 1 for LEVEL, 2 for AUTOMATIC

text_sensor:
  - platform: template
    name: "Glow Plug Status"
    id: stato_Candeletta
    icon: "mdi:induction"
  - platform: template
    name: "Heater Mode"
    id: Mode_Burner

binary_sensor:
  - platform: template
    name: "Heater Status"
    id: stato_Bruciatore

# Sensors for status reporting
sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: template
    name: "Error Code"
    id: Error_Code
    accuracy_decimals: 0 

  - platform: template
    name: "Battery Voltage"
    id: battery_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    icon: "mdi:car-battery"

  - platform: template
    name: "Altitude"
    unit_of_measurement: 'm'
    id: altitude
    device_class: distance
    accuracy_decimals: 0
    icon: "mdi:summit"

  - platform: template
    name: "Power Status"
    id: stato_Potenza
    accuracy_decimals: 0
    icon: "mdi:speedometer"

  - platform: template
    name: "Fan Speed"
    id: fan_speed
    accuracy_decimals: 0
    icon: "mdi:fan"

  - platform: template
    name: "Room Temperature"
    id: room_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    icon: "mdi:home-thermometer"

  - platform: template
    name: "Heating Temperature"
    id: heating_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    icon: "mdi:radiator"

  - platform: ble_client
    type: characteristic
    id: my_ble_sensor
    ble_client_id: heater_ble
    # NEU: Service UUID
    service_uuid: "0000fff0-0000-1000-8000-00805f9b34fb"
    # NEU: Notify Characteristic UUID ODER Handle 0x0003 (für eingehende Daten)
    characteristic_uuid: "0000fff2-0000-1000-8000-00805f9b34fb"
    # Alternative: handle: 0x0003
    handle: 0x0003
    name: "BLE Raw Data"
    notify: true
    # Zusätzliche Handles zur Aktivierung der Benachrichtigung
    # Das CCCD (Client Characteristic Configuration Descriptor) Handle ist 0x0004
    # und muss gesetzt werden, damit Notify funktioniert.
    notification_handle: 0x0004
    lambda: |-
      
      static const char* const states[] = {"Warmup", "Self test running", "Ignition", "Heating", "Shutting down"};

      if (x[0] == 170) {
        ESP_LOGD("BLE", "Received data: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X ",
                  x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17], x[18], x[19]);

        id(heating_temperature).publish_state((int16_t)(((uint8_t)x[14])<<8)|((uint8_t)x[13]));
        id(Mode_Burner).publish_state(x[8] == 2 ? "Automatic" : "Level");
        id(stato_Bruciatore).publish_state(x[3] > 0);
        
        # Set States
        if (x[5] < sizeof(states)/sizeof(states[0])) {
          id(stato_Candeletta).publish_state(states[x[5]]);
        } else {
          ESP_LOGD("Error", "Received state does not match known possible states: %02d", x[5]);
        }
        
        id(stato_Potenza).publish_state(x[9]);
        id(Error_Code).publish_state(x[17]);
        id(altitude).publish_state(((x[7])<<8)|x[6]);
        id(room_temperature).publish_state((int16_t)(((uint8_t)x[16])<<8)|((uint8_t)x[15]));
        id(battery_voltage).publish_state((((x[12])<<8)|x[11])/10.0);

        if (id(stato_Candeletta).state == "Warmup" && id(stato_Bruciatore).state == 0) {
          id(fan_speed).publish_state(0);
        } else {
          id(fan_speed).publish_state(x[10]+1);
        }
      }
      return 0;
        
# Switches
switch:
  - platform: template
    name: "Heater Power"
    id: heater_power
    icon: "mdi:radiator"
    optimistic: true
    turn_on_action:
      - ble_client.ble_write:
          # NEU: Service UUID
          service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
          # NEU: Write Characteristic UUID ODER Handle 0x0005
          characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
          handle: 0x0005
          value: [0xAA, 0x55, 0x0C, 0x22, 0x03, 0x01, 0x00, 0x32] #ON

    turn_off_action:
      - ble_client.ble_write:
          # NEU: Service UUID
          service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
          # NEU: Write Characteristic UUID ODER Handle 0x0005
          characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
          handle: 0x0005
          value: [0xAA, 0x55, 0x0C, 0x22, 0x03, 0x00, 0x00, 0x31] #OFF
      - lambda: |-
          id(fan_speed).publish_state(0);
    
    lambda: |-
      return id(stato_Bruciatore).state;

# Select for mode
select:
  - platform: template
    name: "Heater Mode"
    id: heater_mode
    options:
      - "Level"
      - "Automatic"
    initial_option: "Level"
    optimistic: true
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heater_mode).state == "Level";'
            then:
              - lambda: 'id(current_mode) = 1;'
              - ble_client.ble_write:
                  # NEU: Service UUID
                  service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
                  # NEU: Write Characteristic UUID ODER Handle 0x0005
                  characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
                  handle: 0x0005
                  value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x01, 0x00, 0x31]
            else:
              - lambda: 'id(current_mode) = 2;'
              - ble_client.ble_write:
                  # NEU: Service UUID
                  service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
                  # NEU: Write Characteristic UUID ODER Handle 0x0005
                  characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
                  handle: 0x0005
                  value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x02, 0x00, 0x32]

number:
  - platform: template
    name: "Heater Temperature"
    id: heater_temperature
    min_value: 8
    max_value: 36
    step: 1
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    optimistic: true
    set_action:
      then:
        # Set Automatic mode
        - ble_client.ble_write:
              # NEU: Service UUID
              service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
              # NEU: Write Characteristic UUID ODER Handle 0x0005
              characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
              handle: 0x0005
              value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x02, 0x00, 0x32]
        - delay: 1s
        # Send Temp        
        - ble_client.ble_write:
            # NEU: Service UUID
            service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
            # NEU: Write Characteristic UUID ODER Handle 0x0005
            characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
            handle: 0x0005
            value: !lambda |-
              uint8_t temp = (uint8_t)id(heater_temperature).state;  // Set Temp
              uint8_t checksum = (0xAA + 0x55 + 0x0C + 0x22 + 0x04 + temp + 0x00) +1 % 256 ; // Calc checksum
              return {0xAA, 0x55, 0x0C, 0x22, 0x04, temp, 0x00, checksum};

  - platform: template
    name: "Heater LEVEL"
    id: heater_level
    min_value: 0
    max_value: 10
    step: 1
    unit_of_measurement: "Level"
    icon: "mdi:format-list-numbered"
    optimistic: true
    set_action:
      then:
        # Set Level mode
        - ble_client.ble_write:
            # NEU: Service UUID
            service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
            # NEU: Write Characteristic UUID ODER Handle 0x0005
            characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
            handle: 0x0005
            value: [0xAA, 0x55, 0x0C, 0x22, 0x02, 0x01, 0x00, 0x31]
        - delay: 1s
        # Send Level
        - ble_client.ble_write:
            # NEU: Service UUID
            service_uuid: '0000fff0-0000-1000-8000-00805f9b34fb'
            # NEU: Write Characteristic UUID ODER Handle 0x0005
            characteristic_uuid: '0000fff1-0000-1000-8000-00805f9b34fb'
            handle: 0x0005
            value: !lambda |-
              uint8_t level = (uint8_t)id(heater_level).state;  // Set Level
              uint8_t checksum = (0xAA + 0x55 + 0x0C + 0x22 + 0x04 + level + 0x00) +1 % 256 ; // Calc checksum
              return {0xAA, 0x55, 0x0C, 0x22, 0x04, level, 0x00, checksum};
